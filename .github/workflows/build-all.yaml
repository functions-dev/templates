name: Build All Functions

on: pull_request

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.prep-matrix.outputs.languages }}
      language_paths: ${{ steps.prep-matrix.outputs.language_paths }}
    env:
      FUNC_VERSION: "knative-v1.16.1"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prep Matrix
      id: prep-matrix
      run: |
        ## NOTE: ls -d returns absolute path
        ## GITHUB_WORKSPACE is the root directory
        language_paths="$(ls -d ${GITHUB_WORKSPACE}/*/ | jq -R -s 'split("\n")[:-1]')" 
        languages="$(ls -d ${GITHUB_WORKSPACE}/*/ | xargs -n 1 basename | jq -R -s 'split("\n")[:-1]')"

        # set output
        echo language_paths=$language_paths >> $GITHUB_OUTPUT
        echo languages=$languages >> $GITHUB_OUTPUT

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJSON(needs.prepare.outputs.languages) }}
    env:
      ACTIONS_STEP_DEBUG: true
      language_paths: ${{needs.prepare.outputs.language_paths}}
      HOST_ENABLED_LANGUAGES: '["go"]'
      HOST_ENABLED: ${{ matrix.language == 'go' || matrix.language == 'python' && 'true' || 'false'}}
      HEADREF: ${{github.head_ref}}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install func
      uses: gauron99/knative-func-action@main
      with:
        version: ${{ env.FUNC_VERSION }}
        name: f

    - name: Deploy Function
      run: |
        language=${{matrix.language}}

        # This takes the array of paths, wraps it in single quotes for jq, then
        # selects only the value that matches with language to get current
        # language AND its full path (where the func template is)
        language_path=$(echo '${{env.language_paths}}' | jq -r ".[] | select(contains(\"${{matrix.language}}\"))")

        ## use the Pull request environment so that the changes are included in testing
        url="https://github.com/gauron99/func-templates#${{ env.HEADREF }}"
        WORKDIR=$(mktemp -d)
        cd $WORKDIR
        echo "Building funcs in language ${{matrix.language}}"
        for template_dir_abs in $(ls -d $language_path*/); do
          echo "ls -la ${GITHUB_WORKSPACE}"
          ls -la ${GITHUB_WORKSPACE}
          template=$(basename "$template_dir_abs")
          echo "f create $language-$template -r=$url -l=$language -t=$template"
          
          ## FUNC CREATE
          f create $language-$template -r "$url" -l "$language" -t "$template"

          cd $language-$template

          ## FUNC BUILD
          if ${{env.HOST_ENABLED}}; then
            FUNC_ENABLE_HOST_BUILDER=1 FUNC_BUILDER=host FUNC_CONTAINER=false FUNC_REGISTRY=docker.io/4141gauron3268 f build
          else
            FUNC_REGISTR=docker.io/4141gauron3268 f build --builder=pack
          fi
        done
